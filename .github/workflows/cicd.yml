name: CineReads CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build_test_scan_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute lowercase owner
        id: vars
        run: echo "owner_lc=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- Build & push backend ---
      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.backend
          push: true
          tags: |
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-backend:latest
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-backend:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-backend:latest
          cache-to: type=inline

      # --- Build & push frontend ---
      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.frontend
          push: true
          tags: |
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-frontend:latest
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-frontend:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-frontend:latest
          cache-to: type=inline

      # quick smoke checks (optional)
      - name: Smoke test backend image
        run: docker run --rm ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-backend:${{ github.sha }} uvicorn --version

      - name: Smoke test frontend image
        run: docker run --rm ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-frontend:${{ github.sha }} nginx -v || true

  deploy:
    needs: build_test_scan_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for deploy files)
        uses: actions/checkout@v4

      - name: Compute lowercase owner
        id: vars
        run: echo "owner_lc=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"

      # Ensure the three deploy files exist in repo
      - name: Check deploy files exist
        shell: bash
        run: |
          set -e
          for f in docker-compose.prod.yml deploy/nginx.conf fetch_env.sh; do
            if [ ! -s "$f" ]; then
              echo "::error file=$f::Missing or empty deploy file: $f"
              exit 1
            fi
          done

      - name: Show workspace
        run: |
          pwd
          ls -la
          ls -la deploy || true

      # Upload prod compose, nginx, and fetch_env.sh to EC2
      - name: Upload deploy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          # run from the checked-out repo (use explicit workspace paths)
          source: |
            ${{ github.workspace }}/docker-compose.prod.yml
            ${{ github.workspace }}/deploy/nginx.conf
            ${{ github.workspace }}/fetch_env.sh
          target: /opt/cinereads
          overwrite: true
          strip_components: 3
          rm: false

      # Deploy over SSH (write image tags, ensure awscli + permissions, compose up)
      - name: Deploy to EC2 over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          timeout: 90s
          script: |
            set -euxo pipefail
            sudo mkdir -p /opt/cinereads
            sudo chown -R $USER:$USER /opt/cinereads
            cd /opt/cinereads

            # Make sure fetch_env.sh runnable; create if missing (safety net)
            if [ ! -s fetch_env.sh ]; then
              cat > fetch_env.sh <<'EOS'
            #!/usr/bin/env bash
            set -euo pipefail
            getp() { aws ssm get-parameter --name "$1" --with-decryption --query 'Parameter.Value' --output text; }
            cat > .env <<EOF
            OPENAI_API_KEY=$(getp /cinereads/OPENAI_API_KEY)
            HARDCOVER_API_KEY=$(getp /cinereads/HARDCOVER_API_KEY)
            CACHE_DIR=cache
            CACHE_EXPIRE_SECONDS=3600
            BOOK_CACHE_EXPIRE_SECONDS=86400
            MAX_MOVIES_PER_REQUEST=5
            GPT_MAX_TOKENS=800
            GPT_TEMPERATURE=0.7
            DEBUG=false
            EOF
            echo ".env written"
            EOS
            fi
            chmod +x fetch_env.sh

            # Ensure awscli exists (for SSM fetch)
            if ! command -v aws >/dev/null 2>&1; then
              curl -fsSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o /tmp/awscliv2.zip
              unzip -q /tmp/awscliv2.zip -d /tmp
              sudo /tmp/aws/install || true
            fi

            # If GHCR is private, login (optional)
            if [ -n "${{ secrets.GHCR_PAT }}" ]; then
              echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ steps.vars.outputs.owner_lc }} --password-stdin
            fi

            # Write clean image tags for compose (no 'export')
            printf 'BACKEND_IMAGE=%s\n'  "ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-backend:${{ github.sha }}" > .env.docker
            printf 'FRONTEND_IMAGE=%s\n' "ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-frontend:${{ github.sha }}" >> .env.docker
            echo "=== .env.docker ==="; cat .env.docker

            # Generate app .env from SSM
            ./fetch_env.sh
            echo "=== .env (first lines) ==="; head -n 5 .env || true

            # Pull & restart using env-file (keeps 8000 private; nginx proxies /api)
            docker compose -f docker-compose.prod.yml --env-file .env.docker pull
            docker compose -f docker-compose.prod.yml --env-file .env.docker up -d

            docker ps
