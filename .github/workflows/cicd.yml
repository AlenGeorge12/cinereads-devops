name: CineReads CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build_test_scan_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute lowercase owner
        id: vars
        run: echo "owner_lc=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ steps.vars.outputs.owner_lc }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend build & push
      - name: Build backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.backend
          push: true
          tags: |
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-backend:latest
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-backend:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-backend:latest
          cache-to: type=inline

      # Frontend build & push
      - name: Build frontend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.frontend
          push: true
          tags: |
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-frontend:latest
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-frontend:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-frontend:latest
          cache-to: type=inline

      - name: Smoke test backend image
        run: docker run --rm ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-backend:${{ github.sha }} uvicorn --version

      - name: Smoke test frontend image
        run: docker run --rm ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-frontend:${{ github.sha }} nginx -v || true

      - name: Trivy scan backend
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-backend:${{ github.sha }}
          vuln-type: 'os,library'
          format: 'table'
          exit-code: '0'

      - name: Trivy scan frontend
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-frontend:${{ github.sha }}
          vuln-type: 'os,library'
          format: 'table'
          exit-code: '0'

  deploy:
    needs: build_test_scan_push
    runs-on: ubuntu-latest
    steps:
      - name: Compute lowercase owner
        id: vars
        run: echo "owner_lc=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd /opt/cinereads

            # login to GHCR (only needed if packages are private)
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ steps.vars.outputs.owner_lc }} --password-stdin || true

            # write image tags for compose.prod
            cat > .env.docker <<EOV
            BACKEND_IMAGE=ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-backend:${{ github.sha }}
            FRONTEND_IMAGE=ghcr.io/${{ steps.vars.outputs.owner_lc }}/cinereads-frontend:${{ github.sha }}
            EOV
            echo "Wrote .env.docker with image tags"

            # fetch secrets from SSM into .env for the app
            ./fetch_env.sh

            # pull and restart
            export $(cat .env.docker | xargs)
            docker pull $BACKEND_IMAGE || true
            docker pull $FRONTEND_IMAGE || true
            docker compose -f docker-compose.prod.yml up -d

            docker system prune -f
